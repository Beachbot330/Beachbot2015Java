// RobotBuilder Version: 1.5BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330;

import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.commands.commandgroups.CarryTotes;
import org.usfirst.frc330.commands.commandgroups.LoadSecondTote;
import org.usfirst.frc330.commands.commandgroups.ReceiveTote;
import org.usfirst.frc330.commands.commandgroups.StackThree;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
//import org.usfirst.frc330.commands.autocommands.*;
import org.usfirst.frc330.commands.commandgroups.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton dropOffAndDrive_hold2;
    public Joystick driverL;
    public JoystickButton dropOffTotes_hold2;
    public JoystickButton carryTotes_rel2;
    public JoystickButton loadSecondTote_hold3;
    public JoystickButton receiveTote_rel3;
    public JoystickButton stackThree_5;
    public JoystickButton manualLift_hold4;
    public Joystick driverR;
    public Joystick armJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        armJoystick = new Joystick(2);
        
        driverR = new Joystick(1);
        
        manualLift_hold4 = new JoystickButton(driverR, 4);
        manualLift_hold4.whileHeld(new ManualLift());
        stackThree_5 = new JoystickButton(driverR, 5);
        stackThree_5.whenPressed(new StackThree());
        receiveTote_rel3 = new JoystickButton(driverR, 3);
        receiveTote_rel3.whenReleased(new ReceiveTote());
        loadSecondTote_hold3 = new JoystickButton(driverR, 3);
        loadSecondTote_hold3.whileHeld(new LoadSecondTote());
        carryTotes_rel2 = new JoystickButton(driverR, 2);
        carryTotes_rel2.whenReleased(new CarryTotes());
        dropOffTotes_hold2 = new JoystickButton(driverR, 2);
        dropOffTotes_hold2.whileHeld(new DropOffTotes());
        driverL = new Joystick(0);
        
        dropOffAndDrive_hold2 = new JoystickButton(driverL, 2);
        dropOffAndDrive_hold2.whileHeld(new DropOffAndDrive());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("SetMastChimp", new SetMastChimp());

        SmartDashboard.putData("SetMastStretch", new SetMastStretch());

        SmartDashboard.putData("SetWristPosition", new SetWristPosition());

        SmartDashboard.putData("ShiftLow", new ShiftLow());

        SmartDashboard.putData("ShiftHigh", new ShiftHigh());

        SmartDashboard.putData("BuzzerBeep", new BuzzerBeep());

        SmartDashboard.putData("SetHand", new SetHand());

        SmartDashboard.putData("StackThree", new StackThree());

        SmartDashboard.putData("ReceiveTote", new ReceiveTote());

        SmartDashboard.putData("LoadSecondTote", new LoadSecondTote());

        SmartDashboard.putData("CarryTotes", new CarryTotes());

        SmartDashboard.putData("DropOffTotes", new DropOffTotes());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverL() {
        return driverL;
    }

    public Joystick getDriverR() {
        return driverR;
    }

    public Joystick getArmJoystick() {
        return armJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

