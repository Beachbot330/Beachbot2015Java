// RobotBuilder Version: 1.5BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;	


import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.BBCommand;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.ArmPos;
import org.usfirst.frc330.constants.MastPos;

/**
 *
 */
public class  SetMastPositionThrottle extends BBCommand {
    
	public SetMastPositionThrottle() {
	}


    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.mast.setMastAngle(calcMastPos());
    	Robot.mast.enableMast();
//    	Robot.mast.disableMast();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.mast.setMastAngle(calcMastPos());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return (false);
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    
    public double calcMastPos() {
    	if (Robot.oi.getArmJoystick().getAxisCount() >= 3)
    		return (MastPos.rearLimitAngle-MastPos.frontLimitAngle) * (Robot.oi.getArmJoystick().getAxis(Joystick.AxisType.kZ)+1)/2 + MastPos.frontLimitAngle;
    	else
    		return MastPos.frontLimitAngle;
    }
}
