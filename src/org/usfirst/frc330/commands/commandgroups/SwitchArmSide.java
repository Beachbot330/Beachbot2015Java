// RobotBuilder Version: 1.5BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands.commandgroups;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.commands.SetMastPosition;
import org.usfirst.frc330.commands.ToggleSideSet;
import org.usfirst.frc330.conditionalWrappers.ArmSwitchStartPosition;
import org.usfirst.frc330.conditionalWrappers.ArmSwitchWrist;
import org.usfirst.frc330.constants.MastPos;

import edu.wpi.first.wpilibj.command.BBCommandGroup;

/**
 *
 */
public class SwitchArmSide extends BBCommandGroup {
    
    public  SwitchArmSide() {
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
    	
    	addSequential(new SetMastPosition(MastPos.frontLimitAngle,2.0,1.0));
    	addSequential(new ArmSwitchStartPosition());
//    	addSequential(new ArmSwitchWristToLimit());
    	addSequential(new ToggleSideSet());
    	addSequential(new ArmSwitchWrist());
//    	addSequential(new ArmSwitchStopPosition());
    }
    
    public void initialize() {
    	Robot.arm.setSwitchingSides(true);
    	super.initialize();
    }
    
    public void end() {
    	Robot.arm.setSwitchingSides(false);
    	super.end();
    }
    
    public void interrupted() {
    	Robot.arm.setSwitchingSides(false);
    	super.interrupted();
    }
}
