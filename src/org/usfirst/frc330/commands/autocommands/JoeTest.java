// RobotBuilder Version: 1.5BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands.autocommands;
import org.usfirst.frc330.commands.DriveDistance;
import org.usfirst.frc330.commands.DriveDistanceAtAbsAngle;
import org.usfirst.frc330.commands.DriveDistanceAtAbsAngle_NoTurn;
import org.usfirst.frc330.commands.DriveWaypoint;
import org.usfirst.frc330.commands.DriveWaypointBackward;
import org.usfirst.frc330.commands.RotateAngleAbs;
import org.usfirst.frc330.commands.SetArmPosition;
import org.usfirst.frc330.commands.SetLiftPosition;
import org.usfirst.frc330.commands.SetWristAngle;
import org.usfirst.frc330.commands.ShiftHigh;
import org.usfirst.frc330.commands.ShiftLow;
import org.usfirst.frc330.commands.TurnGyroAbs;
import org.usfirst.frc330.commands.TurnGyroRel;
import org.usfirst.frc330.commands.TurnGyroWaypoint;
import org.usfirst.frc330.commands.TurnGyroWaypointBackward;
import org.usfirst.frc330.constants.ChassisConst;
import org.usfirst.frc330.wpilibj.PIDGains;

import edu.wpi.first.wpilibj.command.BBCommandGroup;
import edu.wpi.first.wpilibj.command.WaitCommand;

/**
 *
 */
public class JoeTest extends BBCommandGroup {
    
    public  JoeTest() {
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
    	PIDGains GyroLow = new PIDGains(0.3, 0, 0, 0, 1.0, 0.02, "HardScrub"); //p,  i,  d,  f,  maxOutput, maxOutputStep, name
    	
    	addSequential(new ShiftLow());
    	addSequential(new WaitCommand(1));   
    	addParallel(new SetLiftPosition(17.3));
    	addParallel(new SetWristAngle(0.0, 3.0, 0.5));  //angle tolerance timeout
    	addSequential(new SetArmPosition(-20, 5.0));
    	addSequential(new RotateAngleAbs(165.9, 2.0, 4.0));  //Angle Tolerance Timeout
//    	addSequential(new TurnGyroWaypointBackward(-24,-24,5,5));
//    	addSequential(new WaitCommand(1));
//    	addSequential(new ShiftHigh());
//    	addSequential(new WaitCommand(1));
//    	addSequential(new DriveWaypointBackward(-24,-24,5,5,false));
//    	addSequential(new ShiftLow());
//    	addSequential(new WaitCommand(2));
//    	addSequential(new TurnGyroWaypoint(48,96,0,5.0,ChassisConst.GyroTurnLow, ChassisConst.GyroTurnHigh));
//    	addSequential(new ShiftHigh());
//    	addSequential(new WaitCommand(2));
//    	addSequential(new TurnGyroWaypoint(0,96.0,5.0,5.0,ChassisConst.GyroLow, ChassisConst.GyroHigh));
    }
}
