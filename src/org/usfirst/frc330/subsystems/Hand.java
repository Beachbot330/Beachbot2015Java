// RobotBuilder Version: 1.5BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.RobotMap;
import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.constants.ArmPos;
import org.usfirst.frc330.constants.HandConst;
import org.usfirst.frc330.util.CSVLoggable;
import org.usfirst.frc330.wpilibj.DualSpeedController;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Hand extends Subsystem implements PIDSource, PIDOutput{
	double verticalHandAngle = HandConst.defaultVerticalHandAngle;
	boolean handLevelActivated = false;
	
	protected PIDController wristPID;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DoubleSolenoid handLeft = RobotMap.handhandLeft;
    DoubleSolenoid handCenter = RobotMap.handhandCenter;
    DoubleSolenoid handRight = RobotMap.handhandRight;
    SpeedController wristLeft = RobotMap.handwristLeft;
    SpeedController wristRight = RobotMap.handwristRight;
    DualSpeedController wrist = RobotMap.handwrist;
    AnalogInput wristPot = RobotMap.handwristPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Hand() {
    	super();
    	
    	wristPID = new PIDController(HandConst.proportional,
				   HandConst.integral,
				   HandConst.derivitive,this,this, 0.01);
    	wristPID.setAbsoluteTolerance(HandConst.tolerance);
    	
    	SmartDashboard.putData("WristPID", wristPID);
        SmartDashboard.putBoolean("WristOverride", false);
    	
    	/////////////////////////////////////////////////////////////////
    	// LOG IT!
    	
    	CSVLoggable temp = new CSVLoggable(true) {
    		public double get() { return getAngleFromArm(); }
    	};
    	Robot.csvLogger.add("WristAngleFromArm", temp);
    	
    	temp = new CSVLoggable(true) {
    		public double get() { return getWristAngle(); }
    	};
    	Robot.csvLogger.add("WristAngle", temp);
    	
    	temp = new CSVLoggable(true) {
    		public double get() { return wristPot.getAverageVoltage(); }
    	};
    	Robot.csvLogger.add("WristPot", temp);
    	
    	temp = new CSVLoggable() {
    		public double get() { return wrist.get(); }
    	};
    	Robot.csvLogger.add("WristOutput", temp);
    	
    	temp = new CSVLoggable() {
    		public double get() { return Robot.powerDP.getWristLeftCurrent(); }
    	};
    	Robot.csvLogger.add("WristLeftCurrent", temp);
    	
    	temp = new CSVLoggable() {
    		public double get() { return Robot.powerDP.getWristRightCurrent(); }
    	};
    	Robot.csvLogger.add("WristRightCurrent", temp);

    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new handLevel());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void setAngle(double angle)
    {
    	wristPID.setSetpoint(angle);
    }
    
    public double getAngleFromArm(){
    	double sensorRange = getHandRearLimit() - getHandFrontLimit();
    	double angleRange = HandConst.rearLimitAngle - HandConst.frontLimitAngle;
    	double angleFromArm = angleRange/sensorRange * (wristPot.getAverageVoltage()- getHandFrontLimit()) + HandConst.frontLimitAngle;
    	return angleFromArm;
    }
    
    public void setHandFrontLimit()
	{        
        String name;
        
        if (Robot.isPracticeRobot())
            name = "PracticeHandFrontLimit";
        else
            name = "CompetitionHandFrontLimit";
        
        Preferences.getInstance().putDouble(name, wristPot.getAverageVoltage());
        Preferences.getInstance().save();
    }
	
	public void setHandRearLimit()
	{
        String name;
        
        if (Robot.isPracticeRobot())
            name = "PracticeHandRearLimit";
        else
            name = "CompetitionHandRearLimit";
        
        Preferences.getInstance().putDouble(name, wristPot.getAverageVoltage());
        Preferences.getInstance().save();
	}
	
    public double getHandFrontLimit() {
		String name;
        if (Robot.isPracticeRobot())
            name = "PracticeHandFrontLimit";
        else
            name = "CompetitionHandFrontLimit";
		return Preferences.getInstance().getDouble(name, 0);
	}
	
	public double getHandRearLimit() {
		String name;
        if (Robot.isPracticeRobot())
            name = "PracticeHandRearLimit";
        else
            name = "CompetitionHandRearLimit";
		return Preferences.getInstance().getDouble(name, 5);
	}

	public double getVerticalHandAngle() {
		return verticalHandAngle;
	}

	public void setVerticalHandAngle(double verticalHandAngle) {
		this.verticalHandAngle = verticalHandAngle;
	}
	
	// ///////////////////////////////////////
	// Hand (Grabber) Open and Close Functions
	// ///////////////////////////////////////
	public void closeHandLeft()
	{
		handLeft.set(DoubleSolenoid.Value.kReverse);
	}
	
	public void openHandLeft()
	{
		handLeft.set(DoubleSolenoid.Value.kForward);
	}
	
	public void closeHandRight()
	{
		handRight.set(DoubleSolenoid.Value.kReverse);
	}
	
	public void openHandRight()
	{
		handRight.set(DoubleSolenoid.Value.kForward);
	}
	
	public void closeHandCenter()
	{
		handCenter.set(DoubleSolenoid.Value.kReverse);
	}
	
	public void openHandCenter()
	{
		handCenter.set(DoubleSolenoid.Value.kForward);
	}

	// //////////////////////////////////////
	// Hand Leveling Code
	// //////////////////////////////////////
	public boolean isHandLevelActivated() {
		return handLevelActivated;
	}

	public void setHandLevelActivated(boolean handLevelActivated) {
		this.handLevelActivated = handLevelActivated;
	}

	public void stopHand() 
	{
		if(wristPID.isEnable())
		{
			wristPID.disable();
		}
	}

	public void pidWrite(double output) {
		set(output - Robot.arm.getArmOutput()/HandConst.feedForward);
	}

	public double pidGet() {
		return getWristAngle();
	}
	
    public void set(double output){
        if (output < 0 && getAngleFromArm() < (HandConst.frontLimitAngle + 10))
        {
        	wrist.set(0);
        }
        else if (output > 0 && getAngleFromArm() > (HandConst.rearLimitAngle-10))
        {
        	wrist.set(0);
        }
        //TODO: Update this code for the wrist
//        if (output > 0 && Robot.powerDP.getWristLeftCurrent() < HandConst.currentLowerLimit)
//        {
//        	wrist.set(0);
//        }
//        else if (output < 0 && Robot.powerDP.getWristLeftCurrent() > HandConst.currentUpperLimit)
//        {
//        	wrist.set(0);
//        }
//        else if (output > 0 && Robot.powerDP.getWristRightCurrent() < HandConst.currentLowerLimit)
//        {
//        	wrist.set(0);
//        }
//        else if (output < 0 && Robot.powerDP.getWristRightCurrent() > HandConst.currentUpperLimit)
//        {
//        	wrist.set(0);
//        }
        else
        {
        	wrist.set(output);
        }
    }
    
	public void setAbsoluteTolerance(double absvalue) {
		wristPID.setAbsoluteTolerance(absvalue);
	}
	
    public synchronized boolean onTarget() {
        return wristPID.onTarget();
    }

    public double getWristAngle()
    {
    	return -(180 - getAngleFromArm() - Robot.arm.getArmAngle());
    }
    
	public void manualWrist()
	{
        double wristCommand = Robot.oi.driverL.getY();
        if (wristCommand < 0) 
            wristCommand = -(wristCommand*wristCommand);
        else
            wristCommand = wristCommand*wristCommand;
        if (Math.abs(wristCommand) > 0.05)
        {
        	if (wristPID.isEnable())
                wristPID.disable();
        	set(wristCommand);
        }
        else if (!wristPID.isEnable())
        {
            wristPID.setSetpoint(this.getWristAngle());
            wristPID.enable();
        }  
	}
	
    public synchronized boolean isEnabled() {
        return wristPID.isEnable();
    }
}

