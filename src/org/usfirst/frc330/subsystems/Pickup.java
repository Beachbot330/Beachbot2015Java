// RobotBuilder Version: 1.5BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.RobotMap;
import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.constants.ArmPos;
import org.usfirst.frc330.constants.PickupPos;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;

import org.usfirst.frc330.wpilibj.DualSpeedController;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Pickup extends Subsystem implements PIDSource, PIDOutput{
	protected PIDController pickupPID;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder pickupEncoder = RobotMap.pickuppickupEncoder;
    Solenoid totePincher = RobotMap.pickuptotePincher;
    SpeedController pickupLiftLeft = RobotMap.pickuppickupLiftLeft;
    SpeedController pickupLiftRight = RobotMap.pickuppickupLiftRight;
    DualSpeedController pickupLift = RobotMap.pickuppickupLift;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void setAbsoluteTolerance(double absvalue) {
		pickupPID.setAbsoluteTolerance(absvalue);
	}
    
	public Pickup() {
        super();
        pickupPID = new PIDController(	PickupPos.proportional,
						        		PickupPos.integral,
						        		PickupPos.derivitive ,this,this);
        
        pickupPID.setAbsoluteTolerance(ArmPos.tolerance);
        SmartDashboard.putData("ArmPID", pickupPID);
        SmartDashboard.putBoolean("ArmOverride", false);
    }
    
    public double getPosition()
    {	
    	return pickupEncoder.getDistance();  //Todo: scale to inches
    }
    
    public void setPosition(double position)
    {
    	pickupPID.setSetpoint(position);
    }

	public void pidWrite(double output) {
		set(output);	
	}

	public double pidGet() {
		return getPosition();
	}
	
    public synchronized double getSetpoint() {
        return pickupPID.getSetpoint();
    }
    
    public synchronized boolean onTarget() {
        return pickupPID.onTarget();
    }
    
    public synchronized boolean isEnable() {
        return pickupPID.isEnable();
    }
    
    public synchronized void enable() {
        pickupPID.enable();
    }
    
    public synchronized void disable() {
        pickupPID.disable();
    }
    
    public void set(double output){
        if (output > 0 && getPosition() > PickupPos.lowerLimit) // Todo: Check this logic
        {
        	pickupLiftLeft.set(0);
        	pickupLiftRight.set(0);
        }
        else if (output < 0 && getPosition() < PickupPos.upperLimit)// Todo: Check this logic
        {
        	pickupLiftLeft.set(0);
        	pickupLiftRight.set(0);
        }
        else
        {
        	pickupLiftLeft.set(output);
            //pickupLiftRight.set(-output); // Todo: check polarity and then re-enable
        }
    }
}

